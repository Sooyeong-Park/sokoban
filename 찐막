#include <stdio.h>            //박수영 , 박지안 , 조성현 소코반!
#include <termios.h>
#include <stdlib.h>
#include <string.h>

#define LEVEL 5 // 맵의 최대 개수
#define X 30	// 맵의 최대 X 값
#define Y 30	// 맵의 최대 Y 값
#define UMAX 5	// undo 최대 값
#define TMAX 5	// 한 맵당 출력되는 랭킹의 최대 값

char username[11];   // 유저명
char map[LEVEL][Y][X];   // 플레이어 이동에 따라 바뀌는 맵
char mapSave[LEVEL][Y][X];   // 원본 맵
int level=-1;   // 현재 레벨
int player_x[LEVEL], player_y[LEVEL];   // 플레이어 위치(x, y)
int player_x_save[LEVEL], player_y_save[LEVEL]; // 원본 맵에서 플레이어 위치 (x, y)
int player_x_undo[UMAX], player_y_undo[UMAX];
int boxCount[LEVEL]={0}, storeCount[LEVEL]={0};   // 상자와 보관장소 수
int moveCount=0, undoCount=UMAX;   // 움직임 횟수, 언두 횟수
char command;   // 입력한 명령
char undo[UMAX][Y][X];	// UNDO 최대 값만큼 맵을 배열에 저장

void User(void);       // 플레이어 이름 받기
int getch(void);		// getch 함수
void clear_level(void);  // 맵 단계 상승
void Command(void);         // 명령 입력 받기
void read_map(void);      // map.txt 에서 맵 읽어오기
void clear_map(void);      // 화면 지우기
void write_map(void);      // 맵 그리기
void player_move(void);    // 플레이어 움직임 (명령 h, j, k, l)
void replay(void);         // 현재 맵 다시 실행 (명령 r)
void new(void);            // 첫 번째 맵부터 다시 시작 (명령 n)
void Exit(void);         // 메시지 출력 후 종료 (명령 e)
void save(void);          // 현재 상태 저장 (명령 s)
void fileload(void);      // 저장된 파일 불러오기 (명령 f)
void Display_help(void);   // 명령목록 출력 (명령 d)
void see_rank(void);		// 랭크 출력 (명령 t)
void rank_print(void);		// ranking.txt에 플레이어 정보 받아오고 정렬
void Undo(void);     // undo 실행 명령
void Undo_map(void); // 움직일 때 마다 undo맵에 저장

int main()
{
   User();
   read_map();
   write_map();
   Command();

   return 0;
}

void User()   // player 이름 받기
{
   printf("Start....\n");

   // username을 공백으로 초기화
   for (int i = 0; i < 11; i++)
      username[i] = ' ';

   printf("input Name : ");
   scanf("%s", username);
}

void read_map() // map.txt에서 맵 배열에 넣기
{
   FILE *mapread;
   mapread=fopen("map.txt","r");

   char c;

   int x=0, y=0;

   while ((c = getc(mapread)) != EOF)
   {
      if (c=='e')
      {
         break;
      }
      if ((49 <= c)&&(c <= 53))
      {   // c가 1~5 사이의 수이면 레벨 증가
         level++;
         y=-1;
         continue;
      }

      if (c=='@')
      {   // 플레이어 위치 저장
         player_x[level]= player_x_save[level] = x;
         player_y[level]= player_y_save[level] = y;
      }

      if (c=='$')
      {   // 상자 수 세기
         boxCount[level]++;
      }

      if (c=='O')
      {   // 보관 장소 수 세기
         storeCount[level]++;
      }

      if (c=='\n')
      {
         y++;
         x=0;
      }

      else	// map.txt의 문자를 배열에 저장
      {
         if (c!='.')
          map[level][y][x] = mapSave[level][y][x] = c;
        else
          map[level][y][x] = mapSave[level][y][x] = ' ';
        x++;
      }
   }

   // $개수와 O개수가 다르면 종료
   for (int i = 0; i < LEVEL; i++)
   {
      if (boxCount[i] != storeCount[i])
      {
         printf("오류| 박스의 개수와 보관장소의 개수가 다릅니다!");
         return;
      }
   }

   level = 0;

   fclose(mapread);
}

void clear_map()   // 맵 지우기
{
   system("clear");
   system("clear");
}

void write_map()   // 맵 그리기
{
   clear_map();
   printf("   Hello \"%s 씨\" 띵호의 소코반에 오신걸 환영합니다.\n\n", username);

   for (int i = 0; i < Y; i++)
   {
      printf("%s\n", map[level][i]);
   }

   printf("(Command) ");
}

void Command()   // 명령 입력 받기
{

   while (command != 'e')
   {
      command = getch();

      switch (command)
      {
         case 'h' :   // 왼쪽이동
         case 'j' :   // 아래이동
         case 'k' :   // 위이동
         case 'l' :   // 오른쪽이동
           player_move();
           moveCount++;
           break;
         case 'u' :   // 되돌리기(undo)
           if (undoCount > 0)
             Undo();
           break;
         case 'r' :   // 현재 맵 다시 시작, 움직임 횟수 유지
           replay();
           break;
         case 'n' :   // 첫째 맵부터 다시 시작, 움직임 횟수 삭제
           new();
           break;
         case 'e' :   // 게임 종료, 종료 전 저장
           save();
           Exit();
           break;
         case 's' :   // 현재 상태 sokoban이라는 파일에 저장
           save();
           break;
         case 'f' :   // sokoban 파일에서 불러오기
           fileload();
           write_map();
            break;
         case 'd' :   // 명령 내용 출력
            Display_help();
            break;
          case 't' :
            see_rank();    // 랭크 보이기
            break;
      }
   }
}

int getch(void) // getch 함수
{
   int ch;

   struct termios buf;
   struct termios save;

   tcgetattr(0, &save);
   buf = save;

   buf.c_lflag&=~(ICANON|ECHO);
   buf.c_cc[VMIN]=1;
   buf.c_cc[VTIME]=0;

   tcsetattr(0, TCSAFLUSH, &buf);

   ch=getchar();
   tcsetattr(0, TCSAFLUSH, &save);

   return ch;
}

void player_move()   // 플레이어 상하좌우 이동
{
   int x=0, y=0;
   Undo_map(); // 움직이기 전 현재 맵을 언두에 저장
   switch (command)
   {
      case 'h' : // 왼쪽 이동
        x--;
        break;
      case 'j' : // 아래 이동
        y++;
        break;
      case 'k' : // 위 이동
        y--;
        break;
      case 'l' : // 오른쪽 이동
        x++;
        break;
    }

      if (map[level][player_y[level]+y][player_x[level]+x] != '#')  //벽이 아니면 움직임
      {
         if (map[level][player_y[level]+y][player_x[level]+x] =='$') // '$'이면 밀음
         {
            if(map[level][player_y[level]+2*y][player_x[level]+2*x] !='#') // '$'앞에 '#'이 아니면 밀음
            {
               if(map[level][player_y[level]+2*y][player_x[level]+2*x] !='$') // '$'앞에 '$'이 아니면 밀음
                {
                  map[level][player_y[level]+2*y][player_x[level]+2*x]='$';
                  map[level][player_y[level]][player_x[level]] = ' ';
                  map[level][player_y[level]+=y][player_x[level]+=x] = '@';
               }
            }
         }
         else
        {
            map[level][player_y[level]][player_x[level]]=' ';
            map[level][player_y[level]+=y][player_x[level]+=x] = '@';
         }
     }
      for (int by = 0; by < Y; by++)	// O가 공백이 되면 O로 바꾸기
     {
       for (int bx = 0; bx < X; bx++)
       {
         if ((mapSave[level][by][bx] == 'O') && (map[level][by][bx] == ' '))
         {
           map[level][by][bx] = 'O';
          }
       }
     }
    clear_level(); // 창고에 상자가 모두 채워졌는지 확인
    write_map();   // 맵 출력
}

void clear_level() // 맵 단계 상승
{
  int full=0; // 창고에 있는 상자 수
  for (int by = 0; by < Y; by++)
  {
    for (int bx = 0; bx < X; bx++)
    {
      if ((mapSave[level][by][bx] == 'O') && (map[level][by][bx] == '$'))
      {
        full++;
      }
    }
  }
  if (boxCount[level] == full)
  {
	  if (level < LEVEL-1)	// 최대 레벨보다 작으면 레벨 증가
	  {
		rank_print();
		moveCount = 0; undoCount = 5;
		undo[0][0][0] = '\0';
   	level++;
	  }
	  else	// 최대 레벨이면 클리어
	  {
		  clear_map();
		  printf("-----C O N G R A T U L A T I O N----- 띵호의 소코반! \n");
	  }
  }
}


void replay()    // 현제 맵 다시시작 움직인 횟수 유지
{
   for (int i = 0; i < Y; i++)
   {
      for (int j = 0; j < X; j++)
      {
         map[level][i][j]=mapSave[level][i][j];
      }
   }
   player_x[level] = player_x_save[level];
   player_y[level] = player_y_save[level];
   undo[0][0][0] = '\0';
   write_map();
}

void new()   // 처음부터 다시시작
{
   moveCount = 0; undoCount = 5;
   for (int lv = 0; lv <= level; lv++)
   {
      for (int y = 0; y < Y; y++)
      {
         for (int x = 0; x < X; x++)
         {
            map[lv][y][x]=mapSave[lv][y][x];
         }
      }
      player_x[lv] = player_x_save[lv];
      player_y[lv] = player_y_save[lv];
   }
   level = 0;
   undo[0][0][0] = '\0';
   write_map();
}


void Exit()  // 종료
{
   clear_map();
   printf("S E E   Y O U   다시 올꺼죠? ㅠㅠ ");
   int i = 0;
   while (username[i] != '\0')
  {
      printf("%c ", username[i]);
      i++;
   }
}

void save()   // 현재 상태 저장
{
   FILE *savefile;
   savefile = fopen("sokoban.txt", "w");

   fprintf(savefile, "%s\n", username);   // 이름 저장
   fprintf(savefile, "%d\n", moveCount);   // 움직인 횟수 저장
   fprintf(savefile, "%d\n", undoCount);   // undo 횟수 저장
   fprintf(savefile, "%d\n", level);      // 레벨 저장

   for (int i = 0; i < Y; i++){      // 맵 저장
      fprintf(savefile, "%s\n", map[level][i]);
   }

   fclose(savefile);
}

void rank_print() // 단계 깰 때 랭크 저장, 움직인 횟수로 정
{
   FILE *rank;
   rank = fopen("ranking.txt","r");

   int levelcount[LEVEL] = {0};	   // 레벨당 저장된 인원수
   int lv[LEVEL*TMAX];             // ranking.txt 파일에 저장된 레벨
   char name[LEVEL*TMAX][11];      // ranking.txt 파일에 저장된 이름
   int count[LEVEL*TMAX];          // ranking.txt 파일에 저장된 움직인 횟수
   int i = 0;
   _Bool check = 0;                // 정렬 가능 여부

   while(fscanf(rank, "%d %s %d", &lv[i], name[i], &count[i]) != EOF) {
      i++;
   }

   rank = fopen("ranking.txt", "w");
   for(int j = 0; j < i; j++)
   {
      if(moveCount < count[j] && !check)	// 움직인 횟수의 기록된 값이 입력되는 값보다 큰 경우
      {
         check = 1;
         levelcount[level]++;
         fprintf(rank, "%d %s %d\n", level + 1, username, moveCount);
      }

      if(levelcount[lv[j] - 1] < TMAX)			// 기존기록 밀어쓰기
      {
         fprintf(rank, "%d %s %d\n", lv[j], name[j], count[j]);
         levelcount[lv[j] - 1]++;
      }
   }

   if(!check && levelcount[level] < TMAX)		// 기존 기록 보다 클 때 자리가 남은경우 기록하기
     fprintf(rank, "%d %s %d\n", level + 1, username, moveCount);

   fclose(rank);
}

void see_rank()  // 't' 또는 't num'누를 때 랭킹 출력
{
	FILE *rank;
	int lv[LEVEL*TMAX];
	char name[LEVEL*TMAX][11];
	int count[LEVEL*TMAX];
	char nameSort[LEVEL][TMAX][11]={0};		// 레벨별로 이름 저장
   int countSort[LEVEL][TMAX];				// 레벨별로 움직인 횟수 저장
   int numSort[LEVEL]={0};					// 각 레벨마다 넣은 횟수 저장
   int i = 0;
   char c;
   int num = 0;

   rank = fopen("ranking.txt", "r");
   putchar('t');
   while((c = getchar()) != '\n')	// t 명령 입력한 이후 [enter]나 숫자 입력 받기
   {
      scanf("%d", &num);
   }

    while(fscanf(rank, "%d %s %d", &lv[i], name[i], &count[i]) != EOF) // 레벨별로 배열에 정보저장
    {
      countSort[lv[i]-1][numSort[lv[i]-1]] = count[i];

		  int j = 0;
		  while (name[i][j] != '\0')
		  {
		 	  nameSort[lv[i]-1][numSort[lv[i]-1]][j] = name[i][j];
			  j++;
		  }
		  numSort[lv[i]-1]++;
      i++;
    }

	  clear_map();

	  if (num == 0)	// t [enter] 일 때 모든 맵의 순위 출력
	  {
		  for (int j = 0; j < LEVEL; j++)
		  {
			  printf("map %d\n", j+1);
		 	  for (int k = 0; k < numSort[j]; k++)
		 	  {
				  printf("%s %d\n", nameSort[j][k], countSort[j][k]);
			  }
		  }
	  }
	  else   // t (num)일 때 num 번째 맵의 순위 출력
    {
		  printf("map %d\n", num);
		  for (int k = 0; k < numSort[num-1]; k++)
		  {
			  printf("%s %d\n", nameSort[num-1][k], countSort[num-1][k]);
		  }
	  }

	  char a = ' ';      //ENTER 누를 때 까지 고정
   	while(a != '\n')
	  {
		  a=getchar();
  	}
 	  write_map();
	  fclose(rank);
}

void fileload()    // 저장된 맵 불러오기
{
   FILE *loadfile;
   loadfile = fopen("sokoban.txt", "r");
   char c;
   int x=0, y=-1;

   fscanf(loadfile, "%s\n", username);
   fscanf(loadfile, "%d\n%d\n%d", &moveCount, &undoCount, &level);

   while ((fscanf(loadfile, "%c", &c) != EOF))
   {
      if (c == '@')
      {
         player_x[level] = x;
         player_y[level] = y;
      }

      if (c == '\n')
      {
         y++;
         x=0;
      }
      else
      {
         map[level][y][x] = c;
         x++;
      }
   }
   fclose(loadfile);
   undo[0][0][0] = '\0';
}

void Display_help(void)  // 도움말 출력
{
   clear_map();
   printf("   Hello  %s 씨 띵호의 소코반에 오신걸 환영합니다.\n\n", username);
   printf("- h(왼쪽), j(아래), k(위), l(오른쪽)\n");
   printf("- u(undo)\n");
   printf("- r(replay)\n");
   printf("- n(new)\n");
   printf("- e(exit)\n");
   printf("- s(save)\n");
   printf("- f(file load)\n");
   printf("- d(display help)\n");
   printf("- t(top)\n");

   char a = ' ';      //ENTER 누를 때 까지 고정
   while(a != '\n')
   {
     a=getchar();
   }
   write_map();
}

void Undo(void){    //U 눌렀을 때 undo 실행
  if (undo[0][0][0]=='\0')
  {
    printf("오류! 더 이상 UNDO 할 수 없습니다!!\n");  // 움직인 횟수가  언두 누른 수 보다 적을 때
    return;
  }

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         map[level][i][j] = undo[0][i][j];
      }
   }
   player_x[level] = player_x_undo[0]; player_y[level] = player_y_undo[0];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[0][i][j] = undo[1][i][j];
      }
   }
   player_x_undo[0] = player_x_undo[1]; player_y_undo[0] = player_y_undo[1];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[1][i][j] = undo[2][i][j];
      }
   }
   player_x_undo[1] = player_x_undo[2]; player_y_undo[1] = player_y_undo[2];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[2][i][j] = undo[3][i][j];
      }
   }
   player_x_undo[2] = player_x_undo[3]; player_y_undo[2] = player_y_undo[3];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[3][i][j] = undo[4][i][j];
      }
   }
   player_x_undo[3] = player_x_undo[4]; player_y_undo[3] = player_y_undo[4];

   moveCount++;
   undoCount--;

   write_map();
}


void Undo_map(void)  // 움직이는 키 누를 때 그 이전 맵을 undo맵(0,1,2,3,4)에 저장
{
   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[4][i][j] = undo[3][i][j];
      }
   }
   player_x_undo[4] = player_x_undo[3]; player_y_undo[4] = player_y_undo[3];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[3][i][j] = undo[2][i][j];
      }
   }
   player_x_undo[3] = player_x_undo[2]; player_y_undo[3] = player_y_undo[2];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[2][i][j] = undo[1][i][j];
      }
   }
   player_x_undo[2] = player_x_undo[1]; player_y_undo[2] = player_y_undo[1];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[1][i][j] = undo[0][i][j];
      }
   }
   player_x_undo[1] = player_x_undo[0]; player_y_undo[1] = player_y_undo[0];

   for (int i = 0; i < Y; i++)
   {
      for(int j = 0; j < X; j++)
      {
         undo[0][i][j] = map[level][i][j];
      }
   }
   player_x_undo[0] = player_x[level]; player_y_undo[0] = player_y[level];
}
